@model ProCareMvc.presentation.Models.BookAppointmentVM

@{
    ViewData["Title"] = "Book Appointment";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<style>
    .payment-card {
        background: #fff;
        border-radius: 10px;
        padding: 1.5rem;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        max-width: 500px;
        margin: 2rem auto;
    }

    .payment-info {
        margin-bottom: 1.5rem;
    }

        .payment-info p {
            margin: 0.5rem 0;
        }

    .paypal-button-container {
        text-align: center;
        margin-top: 1rem;
    }

    .btn-cancel {
        margin-top: 1rem;
        display: inline-block;
    }
</style>

<div class="container">
    <div class="payment-card">
        <h2 class="text-center mb-4">Book Appointment</h2>
        <div class="payment-info">
            <p><strong><i class="fas fa-user-md me-2"></i>Doctor:</strong> @Model.DoctorName</p>
            <p><strong><i class="fas fa-clock me-2"></i>Time:</strong> @Model.StartTime.ToString("dddd, MMMM dd, yyyy HH:mm")</p>
            <p><strong><i class="fas fa-dollar-sign me-2"></i>Amount:</strong> $@Model.Amount</p>
        </div>

        <div class="paypal-button-container">
            <div id="paypal-button"></div>
        </div>

        <div class="text-center">
            <a asp-action="Details" asp-controller="Home" asp-route-id="@Model.DoctorId" class="btn btn-outline-secondary btn-cancel">Cancel</a>
        </div>
    </div>
</div>

<script src="https://www.paypal.com/sdk/js?client-id=@ViewBag.PayPalClientId&currency=USD"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
      var x =  {
                    doctorId: '@Model.DoctorId',
                    startTime: '@Model.StartTime.ToString("yyyy-MM-dd HH:mm")',
                    amount: Number(@Model.Amount)
                }
                console.log("Data to be sent:", x);

    paypal.Buttons({
     
        createOrder: function (data, actions) {
            return fetch('/Payment/CreatePayPalOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(x )
            })
            .then(response => response.json())
            .then(order => {
                console.log("Order response:", order);
                if (order.error) {
                    alert(order.error);
                    return;
                }
                return order.orderId;
            });
        },
        onApprove: function (data, actions) {
            return actions.order.capture().then(function () {
                window.location.href = `/Payment/Complete?orderId=${data.orderID}&doctorId=@Model.DoctorId&startTime=@Model.StartTime.ToString("yyyy-MM-dd HH:mm")`;
            });
        },
        onCancel: function (data) {
            window.location.href = `/Payment/Cancel?doctorId=@Model.DoctorId`;
        },
        onError: function (err) {
            alert('An error occurred, please try again .');
        }
    }).render('#paypal-button');
</script>
